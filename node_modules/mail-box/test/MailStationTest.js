var MailStation = require('../lib/MailStation');
var should = require('should');
var dnode = require('dnode');

describe('mail station', function() {
	var servers = [];
	var serverConfigs = {
		'logic': [
		  {id: 'logic-server-1', host: 'localhost',  port: 3333}, 
		  {id: 'logic-server-2', host: 'localhost',  port: 4444}
		], 
		'area': [
		  {id: 'area-servere-1', host: 'localhost',  port: 5555}
		]
	};
	var opts = {
		servers: serverConfigs	
	};
	var msg = {
		method: 'whomi', 
		args: ['hello']
	};
	
	before(function(done) {
		servers = [];
		//start remote servers
		for(var type in serverConfigs) {
			var configs = serverConfigs[type];
			for(var i=0; i<configs.length; i++) {
				var server = new dnode((function(){
					var id = configs[i].id;
					return {
						whomi: function(msg, cb) {
							cb(null, id, msg);
						}
					};
				})());
				server.listen(configs[i].port);
				servers.push(server);
			}
		}
		done();
	}); 
	
	after(function(done) {
		//stop remote server
		for(var i=0; i<servers.length; i++) {
			servers[i].end();
			servers[i].close();
		}
		done();
	});
	
	describe('#createStation', function() {
		it('should connect the remote servers when create mail station', function(done) {
			MailStation.createStation(opts, function(err, station) {
				should.exist(station);
				station.close();
				done();
			});
		}); 
		
		it('should return an error if connect fail', function(done) {
			var wrongOpts = {
					servers: {
						'logic': [
						  {id:'some-wrong-id', host:'localhost', port: 1234}
						]
					}
			};
			
			MailStation.createStation(wrongOpts, function(err, station) {
				should.exist(err);
				done();
			});
		});
	});
	
	describe('#dispatch', function() {
		it('should send request to the right remote server and get the response from callback function', function(done) {
			var callbackCount = 0;
			var count = 0;
			MailStation.createStation(opts, function(err, station) {
				should.exist(station);
				for(var type in serverConfigs) {
					var configs = serverConfigs[type];
					for(var i=0; i<configs.length; i++) {
						count++;
						station.dispatch(configs[i].id, msg, null, (function() {
							var id = configs[i].id;
							return function(err, remoteId, attach) {
								remoteId.should.equal(id);
								attach.should.equal(msg.args[0]);
								callbackCount++;
							};
						})());
					}
				}
			});
			setTimeout(function() {
				callbackCount.should.equal(count);
				done();
			}, 500);
		});
	});
	
	describe('#close', function() {
		it('should emit a close event for each mailbox close', function(done) {
			var closeEventCount = 0;
			var remoteIds = [];
			var mailboxIds = [];
			for(var type in serverConfigs) {
				var configs = serverConfigs[type];
				for(var i=0; i<configs.length; i++) {
					remoteIds.push(configs[i].id);
				}
			}
			remoteIds.sort();
			
			MailStation.createStation(opts, function(err, station) {
				should.exist(station);
				station.on('close', function(mailboxId) {
					mailboxIds.push(mailboxId);
					closeEventCount++;
				});
				station.close(true);
			});
			
			setTimeout(function() {
				closeEventCount.should.equal(remoteIds.length);
				mailboxIds.sort();
				mailboxIds.should.eql(remoteIds);
				done();
			}, 500);
		});
		
		it('should return an error when try to dispatch message by a closed station', function(done) {
			var errorEventCount = 0;
			var count = 0;
			MailStation.createStation(opts, function(err, station) {
				should.exist(station);
				station.close();
				for(var type in serverConfigs) {
					var configs = serverConfigs[type];
					for(var i=0; i<configs.length; i++) {
						count++;
						station.dispatch(configs[i].id, msg, null, function(err, remoteId, attach) {
							should.exist(err)
							errorEventCount++;
						});
					}
				}
			});
			setTimeout(function() {
				errorEventCount.should.equal(count);
				done();
			}, 500);
		});
	});
	
});