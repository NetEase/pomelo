var EventEmitter = require('events').EventEmitter;
var util = require('util');
var dnode = require('dnode');
var utils = require('../util/Utils');

var DNodeMailBox = function(opts) {
	EventEmitter(this);
	this.id = opts.id;
	this.host = opts.host;
	this.port = opts.port;
};
util.inherits(DNodeMailBox, EventEmitter);

var  pro = DNodeMailBox.prototype;

pro._connect = function(cb) {
	if(!!this.inited) {
		utils.invokeCallback(new Error('already inited.'));
		return;
	}
	this.inited = true;
	
	var self = this;
	
	this.client = new dnode();
	this.client.on('error', function(err) {
		utils.invokeCallback(cb, err);
	});
	this.client.on('end', function() {
		self.emit('close');
	});
	
	this.client.connect(this.port, this.host, function(remote) {
		self.remote = remote;
		utils.invokeCallback(cb, null, self);
	});
};

/**
 * close mailbox
 */
pro.close = function() {
	if(!!this.closed) return;
	this.closed = true;
	this.client.end();
};

/**
 * send message to remote server
 * 
 * @param msg {service:"", method:"", args:[]}
 * @param opts {} attach info to send method
 * @param cb declaration decided by remote interface
 */
pro.send = function(msg, opts, cb) {
	if(!this.inited) {
		utils.invokeCallback(cb, new Error('not init.'));
		return;
	}
	
	if(!!this.closed) {
		utils.invokeCallback(cb, new Error('mailbox alread closed.'));
		return;
	}
	
	if(typeof this.remote[msg.method] !== 'function') {
		utils.invokeCallback(cb, new Error('invalid remote method: ' + msg.method));
		return;
	}
	
	var args = msg.args.slice(0);
	args.push(function() {
		if(typeof cb === 'function') {
			cb.apply(null, arguments);
		}
	});
	this.remote[msg.method].apply(this.remote, args);
};

/**
 * factory method to create mailbox
 * 
 * @param opts remote server info {id:"", host:"", port:""}
 * @param cb(err, mailbox)
 */
module.exports.createMailBox = function(opts, cb) {
	var instance = new DNodeMailBox(opts);
	instance._connect(cb);
};