var EventEmitter = require('events').EventEmitter;
var util = require('util');
var utils = require('./util/Utils');
var async = require('async');
var defaultMailBox = require('./mailbox');

var GRACE_TIMEOUT = 3000;

/**
 * default mailbox generator
 * 
 * @param opts single server instance info
 * @param cb(err, mailbox)
 * @returns
 */
var defaultGenerator = function(opts, cb) {
	defaultMailBox.createMailBox(opts, cb);
};

var MailStation = function(opts) {
	EventEmitter.call(this);
	
	this.servers = opts.servers;
	this.generator = opts.generator || defaultGenerator;
	this.mailboxes = {};
};
util.inherits(MailStation, EventEmitter);

var pro = MailStation.prototype;

/**
 * init station
 */
pro.init = function(cb) {
	//TODO: 确认servers里的结构,目前结构：
	//{server-type:[{id, host, port}]}
	var self = this;
	var fail = false;
	var error = null;
	var count = 0;	//count down lattch for server types
	
	for(var serverType in this.servers) {
		//iterate all the server types
		count++;	//create mailbox is an asynchronous invoke, so this will work
		(function() {
			var type = serverType;
			async.forEach(self.servers[type], function(item, done) {
				//iterate all server configs of a server type
				item.type = type;
				self.generator(item, function(err, mailbox) {
					//generate mailbox instance and add to station
					if(!!err) {
						done(err);
						return;
					}
					mailbox.on('close', (function() {
						var id = item.id;
						return function() {
							self.emit('close', id);
						}
					})());
					self.mailboxes[item.id] = mailbox;
					done(null);
				});
			}, function(err) {
				//process final result for each server type
				count--;
				if(!!err && !fail) {
					//if err, return the first err
					fail = true;
					error = err;
				}
				if(count === 0) {
					if(!!fail) {
						self.close();
						utils.invokeCallback(cb, error);
					} else {
						utils.invokeCallback(cb, null, self);
					}
				}
			});
		})();
	}
};

/**
 * dispatch rpc message
 */
pro.dispatch = function(serverId, msg, opts, cb) {
	if(!!this.closed) {
		utils.invokeCallback(cb, new Error('mail station already closed.'));
		return;
	}
	
	var mailbox = this.mailboxes[serverId];
	if(!mailbox) {
		utils.invokeCallback(cb, new Error('can not find mailbox with id:' + serverId));
		return;
	}
	mailbox.send(msg, opts, cb);
};

/**
 * close station and all its mailboxes
 */
pro.close = function(force) {
	if(!!this.closed) return;
	this.closed = true;
	var self = this;
	function closeAll() {
		for(var id in self.mailboxes) {
			self.mailboxes[id].close();
		}
	}
	if(!!force) {
		closeAll();
	} else {
		setTimeout(closeAll, GRACE_TIMEOUT);
	}
};

/**
 * factory method for station
 * 
 * @param opts server info list
 * @param cb(err, station)
 */
module.exports.createStation = function(opts, cb) {
	var instance = new MailStation(opts);
	instance.init(cb);
};