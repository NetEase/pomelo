var exec = require('child_process').exec;
var util=require('../utils/util');
var async=require('async');
var processMonitor=module.exports;


/**
 * get the process data by command 'ps auxw |grep 'node'|grep -v 'grep'|grep -v 'cd''
 */
function getPsInfo(callback){
	var info={};
	exec("ps auxw |grep 'node'|grep -v 'grep'|grep -v 'cd'",function(error,output){
		if(error!==null){
			console.error('exec error:'+error);
		}else{
			var timestamp=new Date();
//			console.error('process data is :'+output_array);
   			var timestamp=new Date();
			var time=util.formatTime(timestamp);
		    format(output,time,callback);	
		    // console.error('process inf :'+info);
		}
		// callback(info);
	});
}

function format(data,timestamp,cb,interval){
	var outData=data.toString();
	var outArray=outData.replace(/^\s+|\s+$/g,"").split(/\s+/);
//	console.error(outArray);
	if(typeof(interval)=='undefined'){
		interval=0;
	}
	var counter=0;
	var outValueArray=[];
	var outdata=[];
	var redata=[];
	var pids=[];
	for(var i=0;i<outArray.length;i++){
		if((!isNaN(outArray[i])||(outArray[i].indexOf('server')!=-1))){
			outValueArray[counter]=outArray[i];
			counter++;
		}
	}
//	console.log(outValueArray);
	for(var j=0;j<outValueArray.length;j++){
		if(isNaN(outValueArray[j])){
			var ps={};
			ps.time=timestamp;
			var serverId=ps.serverId=outValueArray[j];
			
			ps.serverType=serverId.split('-')[0];
			var pid=ps.pid=outValueArray[j-5];
			pids.push(pid);
			ps.cpuAvg=outValueArray[j-4];
			ps.memAvg=outValueArray[j-3];
			ps.vsz=outValueArray[j-2];
			ps.rss=outValueArray[j-1];
			
			outdata.push(ps);
		}
	}
	async.map(outdata,function(oneData){
		var pid=oneData.pid;
		var outValueArray=[];
    	var counter=0;
		exec('pidstat -p '+pid,function(error,output){
			 var outArray=output.toString().replace(/^\s+|\s+$/g,"").split(/\s+/);
			 for(var i=0;i<outArray.length;i++){
		     if((!isNaN(outArray[i]))){
			 outValueArray[counter]=outArray[i];
			 counter++;
		     }
		 }
		 oneData.usr=outValueArray[1];
		 oneData.sys=outValueArray[2];
		 oneData.gue=outValueArray[3];

		 redata.push(oneData);
		 cb(redata);
		});
		// cb(redata);
		// for(var j=0;j<outdata.length;j++){
		// 	console.error('oneData'+JSON.stringify(outdata[j]));
		// }
	},function(error,cb){
		

	})
    // async.map(pids,function(pid,cb){
    // 	// console.error('pids is'+pids.toString());
    // 	var outValueArray=[];
    // 	var counter=0;
    // 	exec('pidstat -p '+pid,function(error,output){
    //         var outArray=output.toString().replace(/^\s+|\s+$/g,"").split(/\s+/);
    //         for(var i=0;i<outArray.length;i++){
		  //    if((!isNaN(outArray[i])||(outArray[i].indexOf('server')!=-1))){
			 // outValueArray[counter]=outArray[i];
			 // counter++;
		  //    }
	   //     }
	   //     for(var k=0;k<outdata.length;k++){
	   //     	if(outdata[k].pid==pid){
	   //     		console.error(pid);
	   //     		console.error('before :'+JSON.stringify(outdata[k]));
	   //     		outdata[k].usr=outValueArray[1];
	   //     		outdata[k].sys=outValueArray[2];
	   //     		outdata[k].gue=outValueArray[3];
	   //     		console.error('after :'+JSON.stringify(outdata[k]));
	   //     	}
	   //     }
	   //     cb(outdata);
    // 	})
    // 	// for(var i=0;i<outdata.length;i++){
    // 	// 	console.error(JSON.stringify(outdata[i]));
    // 	// }
    //      // cb(outdata);
    // },function(error,output){
    //      // cb(outdata);
    // });
//	console.log(outdata);
	
}
// getPsInfo(function (msg){
//    console.error(msg);
// });
module.exports.getPsInfo=getPsInfo;












