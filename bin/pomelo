#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs')
  , os = require('os')
  , path = require('path')
  , util = require('util')
  , cliff = require('cliff')
  , mkdirp = require('mkdirp')
  , co = require('../lib/modules/console')
  , utils = require('../lib/util/utils')
  , starter = require('../lib/master/starter')
  , exec = require('child_process').exec
  , spawn = require('child_process').spawn
  , version = require('../package.json').version
  , adminClient = require('pomelo-admin').adminClient
  , program = require('commander')

/**
 *  Common Variables
 */
var DEV = 'development';
var TIME_INIT = 1 * 1000;
var TIME_KILL_WAIT = 5 * 1000;

var CUR_DIR = process.cwd();
var IF_HOME = utils.endsWith(CUR_DIR, 'game-server');
var IF_WORKSPACE = fs.existsSync('./app.js') || fs.existsSync('game-server/app.js');
var HOME = IF_HOME ? CUR_DIR : path.join(CUR_DIR, 'game-server');
var LOGS_DIR = IF_HOME ? path.join(CUR_DIR, 'logs') : path.join(CUR_DIR, 'game-server/logs');
var MASTER_CONFIG = path.resolve(HOME, 'config/master.json');
var TMP_FILE = path.resolve(LOGS_DIR, 'tmp');
var KILL_CMD_LUX = 'kill -9 `ps -ef|grep node|awk \'{print $2}\'`';
var KILL_CMD_WIN = 'taskkill /im node.exe /f';
var MASTER_JSON;
var DEFAULT_USERNAME = 'admin';
var DEFAULT_PWD = 'admin';

var NOWORKSPACE_ERROR = 'Please go to your game-server directory to start the application.';
var INSTALLFOREVER_ERROR = 'Please install forever use command first: npm install forever -g.';
var CONNECT_ERROR = 'Fail to connect to admin console server.';
var FILEREAD_ERROR = 'Fail to read the file, please check if the application is started legally.';
var RUNDAEMON_INFO = 'Application run in daemon.\nStop the application use the command:pomelo stop.';
var CLOSEAPP_INFO = 'Closing the application......\nPlease wait......';
var ADD_SERVER_INFO = 'Successfully add server.';
var INIT_PROJ_NOTICE = "\nThe default admin user is: \n\n"+ "  username".green + ": admin\n  " + "password".green+ ": admin\n\nYou can configure admin users by editing adminUser.json later.\n ";

var COMMAND_ERROR = 'Illegal command format. Use `pomelo --help` to get more info.'.red;

program.version(version);

program.command('init <path>')
  .description('create a new application')
  .action(function(path) {
    init(path); 
  });

program.command('start')
  .description('start the application')
  .option('-e, --env <env>', 'the used environment', DEV)
  .option('-d, --daemon', 'enable the daemon start')
  .action(function(opts) {
    start(opts); 
  });

program.command('list')
  .description('list the servers')
  .option('-u, --username <username>', 'administration user name', DEFAULT_USERNAME)
  .option('-p, --password <password>', 'administration password', DEFAULT_PWD)
  .option('-h, --host <master_host>', 'master server host')
  .option('-P, --port <master_port>', 'master server port')
  .action(function(opts) {
    list(opts); 
  });

program.command('add')
  .description('add a new server')
  .option('-u, --username <username>', 'administration user name', DEFAULT_USERNAME)
  .option('-p, --password <password>', 'administration password', DEFAULT_PWD)
  .option('-h, --host <master_host>', 'master server host')
  .option('-P, --port <master_port>', 'master server port')
  .action(function() {
    var args = Array.prototype.slice.call(arguments, 0);
    var opts = args[args.length - 1];
    opts.args = args.slice(0, -1); 
    add(opts);
  });

program.command('stop')
  .description('stop the servers, for multiple servers, use `pomelo stop server-id-1 server-id-2`')
  .option('-u, --username <username>', 'administration user name', DEFAULT_USERNAME)
  .option('-p, --password <password>', 'administration password', DEFAULT_PWD)
  .option('-h, --host <master_host>', 'master server host')
  .option('-P, --port <master_port>', 'master server port')
  .action(function() {
    var args = Array.prototype.slice.call(arguments, 0);
    var opts = args[args.length - 1];
    opts.serverIds = args.slice(0, -1);
    terminal('stop', opts);
  });

program.command('kill') 
  .description('kill the application')
  .option('-u, --username <username>', 'administration user name', DEFAULT_USERNAME)
  .option('-p, --password <password>', 'administration password', DEFAULT_PWD)
  .option('-h, --host <master_host>', 'master server host')
  .option('-P, --port <master_port>', 'master server port')
  .option('-f, --force', 'using this option would kill all the node processes')
  .action(function() {
    var args = Array.prototype.slice.call(arguments, 0);
    var opts = args[args.length - 1];
    opts.serverIds = args.slice(0, -1); 
    terminal('kill', opts); 
  });

program.command('masterha <config_or_args>')
  .description('start all the slaves of the master')
  .action(function(config) {
    startMasterha(config);
  });

program.command('*')
  .action(function() {
    abort(COMMAND_ERROR);
  });

program.parse(process.argv);

/**
 * Init application at the given directory `path`.
 *
 * @param {String} path
 */
function init(path) {
  console.log(INIT_PROJ_NOTICE);
  connectorIsWs(function(isWs) {
    emptyDirectory(path, function(empty) {
      if(empty) {
        process.stdin.destroy();
        createApplicationAt(path, isWs);
      } else {
        confirm('Destination is not empty, continue? (y/n) [no] ', function(force) {
          process.stdin.destroy();
          if(force) {
            createApplicationAt(path, isWs);
          } else {
            abort('Fail to init a project'.red);
          }
        });
      };
    });
  });
};

/**
 * Create directory and files at the given directory `path`.
 *
 * @param {String} ph
 */
function createApplicationAt(ph, isWs) {
  var name = path.basename(path.resolve(CUR_DIR, ph));
  copy(path.join(__dirname, '../template/'), ph);
  mkdir(path.join(ph, 'game-server/logs'));
  mkdir(path.join(ph, 'shared'));
  setTimeout(function() {
    if (isWs) {

      // use websocket
      var unlinkFiles = ['game-server/app.js.sio', 
                         'web-server/public/index.html.sio',
                         'web-server/public/js/lib/pomeloclient.js',
                         'web-server/public/js/lib/socket.io.js'];
      for(var i = 0; i < unlinkFiles.length; ++i) {
        fs.unlinkSync(path.resolve(ph, unlinkFiles[i]));
      }
    } else {
      // use socket.io
      fs.unlinkSync(path.resolve(ph, 'game-server/app.js'));
      fs.renameSync(path.resolve(ph, 'game-server/app.js.sio'),
                    path.resolve(ph, 'game-server/app.js'));

      fs.unlinkSync(path.resolve(ph, 'web-server/public/index.html'));
      fs.renameSync(path.resolve(ph, 'web-server/public/index.html.sio'),
                    path.resolve(ph, 'web-server/public/index.html'));

      // rmdir -r
      var rmdir = function(dir) {
        var list = fs.readdirSync(dir);
        for(var i = 0; i < list.length; i++) {
          var filename = path.join(dir, list[i]);
          var stat = fs.statSync(filename);
          if(filename == "." || filename == "..") {
          } else if(stat.isDirectory()) {
            rmdir(filename);
          } else {
            fs.unlinkSync(filename);
          }
        }
        fs.rmdirSync(dir);
      };

      rmdir(path.resolve(ph, 'web-server/public/js/lib/build'));
      rmdir(path.resolve(ph, 'web-server/public/js/lib/local'));
      fs.unlinkSync(path.resolve(ph, 'web-server/public/js/lib/component.json'));
    }
    var replaceFiles = ['game-server/app.js',
                        'game-server/package.json',
                        'web-server/package.json'];
    for(var i = 0; i < replaceFiles.length; i++) {
      var str = fs.readFileSync(path.resolve(ph, replaceFiles[i])).toString();
      fs.writeFileSync(path.resolve(ph, replaceFiles[i]), str.replace('$', name));
    }
    var f = path.resolve(ph, 'game-server/package.json');
    var content = fs.readFileSync(f).toString();
    fs.writeFileSync(f, content.replace('#', version));
  }, TIME_INIT);
}

/**
 * Start application.
 *
 * @param {Object} opts options for `start` operation
 */
function start(opts) {
  if(IF_HOME) {
    var ls;
    if(!opts.daemon) {
      ls = spawn(process.execPath, [path.resolve(HOME, 'app.js'), 'env=' + opts.env]);
      ls.stdout.on('data', function(data) {
        console.log(data.toString());
      });
      ls.stderr.on('data', function(data) {
        console.log(data.toString());
      });
    } else {
        var cmd = 'forever start app.js env=' + opts.env;
        ls = exec(cmd, function(err, stdout, stderr) {
          if(!!err) {
            abort(INSTALLFOREVER_ERROR);
          }
          else {
            console.info(RUNDAEMON_INFO);
          }
        });
    }
    fs.writeFile(TMP_FILE, opts.env + ':' + !!opts.daemon);
  } else abort(NOWORKSPACE_ERROR);
};

/**
 * List pomelo processes.
 *
 * @param {Object} opts options for `list` operation
 */
function list(opts) {
  if(IF_WORKSPACE) {    
    fs.readFile(TMP_FILE, function(err, data) {
      if(err) abort(FILEREAD_ERROR);
      var client = new adminClient({username: opts.username, password: opts.password, md5: true});
      MASTER_JSON = require(MASTER_CONFIG);
      var config = MASTER_JSON[data.toString().split(':')[0]];
      var id = 'pomelo_list_' + Date.now();
      client.connect(id, opts.host || config.host, opts.port || config.port, function(err) {
        if(err) abort(CONNECT_ERROR + err.red);
        else {
          client.request(co.moduleId, {
            signal: 'list'
          }, function(err, data) {
            if(err) console.error(err);            
            var msg = data.msg;
            var rows = [];
            rows.push(['serverId', 'serverType', 'pid', 'heapUsed(M)', 'uptime(m)']);
            for(var key in msg) {
              var server = msg[key];
              rows.push([server['serverId'], server['serverType'], server['pid'], server['heapUsed'], server['uptime']]);
            }
            console.log(cliff.stringifyRows(rows, ['red', 'blue', 'green', 'white', 'yellow']));
            process.exit(0);
          });
        }
      });
    });
  } else abort(NOWORKSPACE_ERROR);
};

/**
 * Add server to application.
 *
 * @param {Object} opts options for `add` operation
 */
function add(opts) {
  if(IF_WORKSPACE) {
    fs.readFile(TMP_FILE, function(err, data) {
      if(err) abort(FILEREAD_ERROR);
      var client = new adminClient({username: opts.username, password: opts.password, md5: true});
      MASTER_JSON = require(MASTER_CONFIG);
      var config = MASTER_JSON[data.toString().split(':')[0]];
      var id = 'pomelo_add_' + Date.now();
      client.connect(id, opts.host || config.host, opts.port || config.port, function(err) {
        if(err) abort(CONNECT_ERROR + err.red);
        else {
          client.request(co.moduleId, { signal: 'add', args: opts.args }, function(err, msg) {
            if(err) console.error(err);            
            else console.info(ADD_SERVER_INFO);
            process.exit(0);
          });
       }
     });
    });
  } else abort(NOWORKSPACE_ERROR);
};

/**
 * Terminal application.
 *
 * @param {String} signal stop/kill
 * @param {Object} opts options for `stop/kill` operation
 */
function terminal(signal, opts) {
  if(IF_WORKSPACE) {
    console.info(CLOSEAPP_INFO);
    if(!!opts.force){
      os.platform() === 'win32' ? exec(KILL_CMD_WIN):exec(KILL_CMD_LUX);
      process.exit(1);
      return;
    } 
    fs.readFile(TMP_FILE, function(err, data) {
      if(err) abort(FILEREAD_ERROR);
      var client = new adminClient({username: opts.username, password: opts.password, md5: true});
      MASTER_JSON = require(MASTER_CONFIG);
      var config = MASTER_JSON[data.toString().split(':')[0]];
      var id = 'pomelo_terminal_' + Date.now();
      if(data.toString().split(':')[1] === 'true') {
        setTimeout(function() {
          if(IF_HOME) exec('forever stop app.js');
          else exec('cd game-server && forever stop app.js');
          process.exit(0);
        }, TIME_KILL_WAIT);
      }
      client.connect(id, opts.host || config.host, opts.port || config.port, function(err) {
        if(err) abort(CONNECT_ERROR + err.red);
        client.request(co.moduleId, {
          signal: signal, ids: opts.serverIds
        }, function(err, msg) {
          if(err) console.error(err);
          setTimeout(function() {
            if(msg && msg.status === 'all') fs.unlinkSync(TMP_FILE);
            process.exit(0);
          }, TIME_KILL_WAIT);
        });
      });
    });
  } else abort(NOWORKSPACE_ERROR);
};

/**
 * Start master slaves.
 *
 * @param {String} config a config file name ending with `.json` or a config string
 */
function startMasterha(config) {
  if(IF_HOME) {
     if (config.indexOf('.json') >= 0) {
        var path = HOME + config; 
        if(!fs.existsSync(path)) {
          abort('Fail to find the masterha file on ' + path);
          return;
        }
        var masterha = require(path)['masterha'];
        for(var i=0; i<masterha.length; i++) {
          var server = masterha[i];
          server['mode'] = 'stand-alone';
          server['masterha'] = 'true';
          runServer(server);
        }
     } else {
        var server = {};
        var args = config.split(/ +/);
        for(var i=0; i<args.length; i++) {
          if(args[i].indexOf('=') < 0) {
            abort(COMMAND_ERROR);
            return;
          }
          server[args[i].split('=')[0]] = args[i].split('=')[1];  
        }
        server['mode'] = 'stand-alone';
        server['masterha'] = 'true';
        runServer(server);
     }
  } else {
    abort(NOWORKSPACE_ERROR);
  }
};

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files) {
    if(err && 'ENOENT' != err.code) abort(FILEREAD_ERROR);
    fn(!files || !files.length);
  });
};

/**
 * Prompt confirmation with the given `msg`.
 *
 * @param {String} msg
 * @param {Function} fn
 */
function confirm(msg, fn) {
  prompt(msg, function(val) {
    fn(/^ *y(es)?/i.test(val));
  });
};

/**
 * Prompt input with the given `msg` and callback `fn`.
 *
 * @param {String} msg
 * @param {Function} fn
 */
function prompt(msg, fn) {
  if(' ' == msg[msg.length - 1]) process.stdout.write(msg);
  else console.log(msg);
  process.stdin.setEncoding('ascii');
  process.stdin.once('data', function(data) {
    fn(data);
  }).resume();
};

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
  console.error(str);
  process.exit(1);
};

/**
 * Copy template files to project.
 *
 * @param {String} origin
 * @param {String} target
 */
function copy(origin, target) {
  if(!fs.existsSync(origin)) abort(origin + 'does not exist.');
  if(!fs.existsSync(target)) {
    mkdir(target);
    console.log('   create : '.green + target);
  }
  fs.readdir(origin, function(err, datalist) {
    if(err) abort(FILEREAD_ERROR);
    for(var i = 0; i < datalist.length; i++) {
      var oCurrent = path.resolve(origin, datalist[i]);
      var tCurrent = path.resolve(target, datalist[i]);
      if(fs.statSync(oCurrent).isFile()) {
        fs.writeFileSync(tCurrent, fs.readFileSync(oCurrent, ''), '');
        console.log('   create : '.green + tCurrent);
      } else if(fs.statSync(oCurrent).isDirectory()) copy(oCurrent, tCurrent);
    }
  });
};

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */
function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   create : '.green + path);
    fn && fn();
  });
}

/**
 * Get user's choice on connector selecting
 * 
 * @param {Function} cb
 */
function connectorIsWs(cb) {
  prompt('Please select underly connector, 1 for WebSocket, 2 for socket.io: [1] ', function(msg) {
    switch(msg.trim()) {
      case '':
      case '1':
         cb(true);
         break;
      case '2':
         cb(false);
         break;
      default:
         process.stdout.write('Invalid choice! Please input 1 or 2.'.red + '\n');
         connectorIsWs(cb);
         break;
    }
  });
};

/**
 * Run server.
 * 
 * @param {Object} server server information
 */
function runServer(server) {
  var cmd, key;
  var main = path.resolve(HOME, 'app.js');
  if(utils.isLocal(server.host)) {
    var options = [];
    options.push(main);
    for(key in server) {
      options.push(util.format('%s=%s', key, server[key]));
    }
    starter.localrun(process.execPath, null, options);
  } else {
    cmd = util.format('cd "%s" && "%s"', HOME, process.execPath);
    cmd += util.format(' "%s" ', main);
    for(key in server) {
      cmd += util.format(' %s=%s ', key, server[key]);
    }
    starter.sshrun(cmd, server.host);
  }
};

