#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs'),
    path = require('path'),
    util = require('util'),
    cliff = require('cliff'),
    cp = require('child_process'),
    exec = cp.exec,
    spawn = cp.spawn,
    co = require('../lib/modules/console'),
    utils = require('../lib/util/utils'),
    adminClient = require('pomelo-admin').adminClient;

/**
 *  Common Variables
 */
var DEV = 'development';
var PRD = 'production';
var DEM = '--daemon';
var DAEMON = false;
var TIME_INIT = 1 * 1000;
var TIME_KILL_WAIT = 5 * 1000;

var CUR_DIR = process.cwd();
var IF_HOME = utils.endsWith(CUR_DIR, 'game-server');
var IF_WORKSPACE = fs.existsSync('./app.js') || fs.existsSync('game-server/app.js');
var FOREVER = fs.existsSync(path.dirname(process.execPath) + '/forever');
var HOME = IF_HOME ? CUR_DIR : path.join(CUR_DIR, 'game-server');
var LOGS_DIR = IF_HOME ? path.join(CUR_DIR, 'logs') : path.join(CUR_DIR, 'game-server/logs');
var MASTER_CONFIG = path.resolve(HOME, 'config/master.json');
var TMP_FILE = path.resolve(LOGS_DIR, 'tmp');
var KILL_CMD = 'kill -9 `ps -ef|grep node|awk \'{print $2}\'`';
var MASTER_JSON;

var NOWORKSPACE_ERROR = 'Please go to your game-server directory to start the application.';
var COMMAND_ERROR = 'The command is error format.';
var INSTALLFOREVER_ERROR = 'Please install forever use command: npm install forever -g.';
var CONNECT_ERROR = 'Fail to connect to admin console server.';
var NODEINFO_ERROR = 'Fail to request node information.';
var STOPSERVER_ERROR = 'Fail to stop server.';
var FILEREAD_ERROR = 'Fail to read the file, please check if the application is started legally.';
var RUNDAEMON_INFO = 'Application run in daemon.\nStop the application use the command:pomelo stop.';
var CLOSEAPP_INFO = 'Closing the application......\nPlease wait......';
/**
 * Usage documentation.
 */
var usage = '' + '\n' + '  Usage: pomelo [action] [option]\n' + '\n' + '  Options:\n' + '    init  [path]              create new application\n' + '    start [option]            start the application\n' + '    list                      list server information\n' + '    stop                      stop the application\n' + '    kill  [--force]           kill the application\n' + '    version                   output framework version\n' + '    help                      output help information\n' + '    [option]                  developement(default)/production --daemon';

/**
 * Framework version.
 */
var version = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../package.json'))).version;

/**
 * Parse command arguments.
 */
var args = process.argv.slice(2);

(function() {
    var arg = args.shift();
    switch(arg) {
    case 'help':
        legalArgNum(0);
        abort(usage);
        break;
    case 'version':
        legalArgNum(0);
        abort(version);
        break;
    case 'list':
        legalArgNum(0);
        list();
        break;
    case 'init':
        legalArgNum(1);
        init(args[0]);
        break;
    case 'start':
        start();
        break;
    case 'stop':
        legalArgNum(0);
        terminal('stop');
        break;
    case 'kill':
        terminal('kill');
        break;
    default:
        abort(COMMAND_ERROR);
        break;
    }
})();

/**
 * Init application at the given directory `path`.
 *
 * @param {String} path
 */
function init(path) {
    emptyDirectory(path, function(empty) {
        if(empty) {
            createApplicationAt(path);
        } else {
            confirm('destination is not empty, continue? (y/n)', function(ok) {
                if(ok) {
                    process.stdin.destroy();
                    createApplicationAt(path);
                } else {
                    abort('aborting');
                }
            });
        }
    });
};

/**
 * Create directory and files at the given directory `path`.
 *
 * @param {String} ph
 */
function createApplicationAt(ph) {
    var name = path.basename(path.resolve(CUR_DIR, ph));
    copy(path.join(__dirname, '../template/'), ph);
    mkdir(path.join(ph, 'game-server/logs'), 0755);
    mkdir(path.join(ph, 'shared'), 0755);
    setTimeout(function() {
        var repalcefile = [path.resolve(ph, 'game-server/app.js'), path.resolve(ph, 'game-server/package.json'), path.resolve(ph, 'web-server/package.json')];
        for(var i = 0; i < repalcefile.length; i++) {
            var str = fs.readFileSync(repalcefile[i]).toString();
            fs.writeFileSync(repalcefile[i], str.replace('$', name));
        }
        var f = path.resolve(ph, 'game-server/package.json');
        var content = fs.readFileSync(f).toString();
        fs.writeFileSync(f, content.replace('#', version));
    }, TIME_INIT);
};

/**
 * Start application.
 *
 */
function start() {
    var mode = DEV;
    switch(args.length) {
    case 0:
        break;
    case 1:
        if(args[0] == DEV || args[0] == PRD) mode = args[0];
        else if(args[0] == DEM) DAEMON = true;
        else abort(COMMAND_ERROR);
        break;
    case 2:
        if(args[0] == DEV || args[0] == PRD) {
            mode = args[0];
            if(args[1] == DEM) DAEMON = true;
            else abort(COMMAND_ERROR);
        } else abort(COMMAND_ERROR);
        break;
    default:
        abort(COMMAND_ERROR);
        break;
    };
    if(IF_HOME) {
        var ls;
        if(!DAEMON) {
            ls = spawn(process.execPath, [path.resolve(HOME, 'app.js'), 'env=' + mode]);
            ls.stdout.on('data', function(data) {
                console.log(data.toString());
            });
            ls.stderr.on('data', function(data) {
                console.log(data.toString());
            });
        } else {
            if(FOREVER) {
                var cmd = 'forever start app.js env=' + mode;
                ls = exec(cmd);
                console.info(RUNDAEMON_INFO);
            } else abort(INSTALLFOREVER_ERROR);
        }
        fs.writeFile(TMP_FILE, mode + ':' + DAEMON);
    } else abort(NOWORKSPACE_ERROR);
};

/**
 * List pomelo processes.
 *
 */
function list() {
    if(IF_WORKSPACE) {
        fs.readFile(TMP_FILE, function(err, data) {
            if(err) abort(FILEREAD_ERROR);
            var client = new adminClient();
            MASTER_JSON = require(MASTER_CONFIG);
            var config = MASTER_JSON[data.toString().split(':')[0]];
            var id = 'pomelo_list_' + Date.now();
            client.connect(id, config.host, config.port, function(err) {
                if(err) abort(CONNECT_ERROR);
                else {
                    client.request(co.moduleId, {
                        signal: 'list'
                    }, function(err, data) {
                        if(err) {
                            console.error(err);
                            abort(NODEINFO_ERROR);
                        }
                        var msg = data.msg;
                        var rows = [];
                        rows.push(['serverId', 'serverType', 'pid', 'cpuAvg', 'memAvg', 'time']);
                        for(var key in msg) {
                            var server = msg[key];
                            rows.push([server['serverId'], server['serverType'], server['pid'], server['cpuAvg'], server['memAvg'], server['time']]);
                        }
                        console.log(cliff.stringifyRows(rows, ['red', 'blue', 'green', 'white', 'yellow', 'grey']));
                        process.exit(1);
                    });
                }
            });
        });
    } else abort(NOWORKSPACE_ERROR);
};

/**
 * Terminal application.
 *
 * @param {String} signal stop/kill
 *
 */
function terminal(signal) {
    if(args.length > 1 || (args.length === 1 && args[0] !== '--force')) abort(COMMAND_ERROR);
    if(IF_WORKSPACE) {
        console.info(CLOSEAPP_INFO);
        if(args[0] === '--force') {
            exec(KILL_CMD);
            process.exit(1);
        }
        fs.readFile(TMP_FILE, function(err, data) {
            if(err) abort(FILEREAD_ERROR);
            var client = new adminClient();
            MASTER_JSON = require(MASTER_CONFIG);
            var config = MASTER_JSON[data.toString().split(':')[0]];
            var id = 'pomelo_terminal_' + Date.now();
            if(data.toString().split(':')[1] == 'true') {
                setTimeout(function() {
                    if(IF_HOME) exec('forever stop app.js');
                    else exec('cd game-server && forever stop app.js');
                    process.exit(1);
                }, TIME_KILL_WAIT);
            }
            client.connect(id, config.host, config.port, function(err) {
                if(err) abort(CONNECT_ERROR);
                client.request(co.moduleId, {
                    signal: signal
                }, function(err, msg) {
                    if(err) abort(STOPSERVER_ERROR);
                    if(msg.status === "error") abort(STOPSERVER_ERROR);
                    setTimeout(function() {
                        exec(KILL_CMD);
                        fs.unlinkSync(TMP_FILE);
                        process.exit(1);
                    }, TIME_KILL_WAIT);
                });
            });
        });
    } else abort(NOWORKSPACE_ERROR);
};


/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory(path, fn) {
    fs.readdir(path, function(err, files) {
        if(err && 'ENOENT' != err.code) abort(FILEREAD_ERROR);
        fn(!files || !files.length);
    });
};

/**
 * Prompt confirmation with the given `msg`.
 *
 * @param {String} msg
 * @param {Function} fn
 */
function confirm(msg, fn) {
    prompt(msg, function(val) {
        fn(/^ *y(es)?/i.test(val));
    });
};

/**
 * Prompt input with the given `msg` and callback `fn`.
 *
 * @param {String} msg
 * @param {Function} fn
 */
function prompt(msg, fn) {
    if(' ' == msg[msg.length - 1]) process.stdout.write(msg);
    else console.log(msg);
    process.stdin.setEncoding('ascii');
    process.stdin.once('data', function(data) {
        fn(data);
    }).resume();
};

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
    console.error(str);
    process.exit(1);
};

/**
 * Check whether the number of arguments is legal.
 *
 * @param {Number} argNum
 */
function legalArgNum(argNum) {
    if(args.length != argNum) abort(COMMAND_ERROR);
};

/**
 * Copy template files to project.
 *
 * @param {String} origin
 * @param {String} target
 */
function copy(origin, target) {
    if(!fs.existsSync(origin)) abort(origin + 'is not exist.');
    if(!fs.existsSync(target)) {
        mkdir(target, 0);
        console.log('Make dir: ' + target);
    }
    fs.readdir(origin, function(err, datalist) {
        if(err) abort(FILEREAD_ERROR);
        for(var i = 0; i < datalist.length; i++) {
            var oCurrent = path.resolve(origin, datalist[i]);
            var tCurrent = path.resolve(target, datalist[i]);
            if(fs.statSync(oCurrent).isFile()) {
                fs.writeFileSync(tCurrent, fs.readFileSync(oCurrent, ''), '');
                console.log('Create file: ' + tCurrent);
            } else if(fs.statSync(oCurrent).isDirectory()) copy(oCurrent, tCurrent);
        }
    });
};

/**
 * Make directory for new project.
 *
 * @param {String} path
 * @param {Number} mode
 */
function mkdir(url, mode) {
    var arr = url.split('/');
    mode = mode || 0755;
    switch(arr[0]) {
    case '.':
        arr.shift();
        break;
    case '..':
        arr.splice(0, 2, arr[0] + '/' + arr[1]);
        break;
    case '':
        arr[0] = "/";
        break;
    };

    function inner(cur) {
        if(!fs.existsSync(cur)) fs.mkdirSync(cur, mode);
        if(arr.length) inner(cur + '/' + arr.shift());
    }
    arr.length && inner(arr.shift());
    console.log('Make dir: ' + url);
};
