#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs')
  , os = require('os')
  , path = require('path')
  , util = require('util')
  , cliff = require('cliff')
  , mkdirp = require('mkdirp')
  , co = require('../lib/modules/console')
  , utils = require('../lib/util/utils')
  , exec = require('child_process').exec
  , spawn = require('child_process').spawn
  , version = require('../package.json').version
  , adminClient = require('pomelo-admin').adminClient;

/**
 *  Common Variables
 */
var DEV = 'development';
var PRD = 'production';
var DEM = '--daemon';
var DAEMON = false;
var TIME_INIT = 1 * 1000;
var TIME_KILL_WAIT = 5 * 1000;

var CUR_DIR = process.cwd();
var IF_HOME = utils.endsWith(CUR_DIR, 'game-server');
var IF_WORKSPACE = fs.existsSync('./app.js') || fs.existsSync('game-server/app.js');
var HOME = IF_HOME ? CUR_DIR : path.join(CUR_DIR, 'game-server');
var LOGS_DIR = IF_HOME ? path.join(CUR_DIR, 'logs') : path.join(CUR_DIR, 'game-server/logs');
var MASTER_CONFIG = path.resolve(HOME, 'config/master.json');
var TMP_FILE = path.resolve(LOGS_DIR, 'tmp');
var KILL_CMD_LUX = 'kill -9 `ps -ef|grep node|awk \'{print $2}\'`';
var KILL_CMD_WIN = 'taskkill /im node.exe /f';
var MASTER_JSON;

var NOWORKSPACE_ERROR = 'Please go to your game-server directory to start the application.';
var INSTALLFOREVER_ERROR = 'Please install forever use command first: npm install forever -g.';
var CONNECT_ERROR = 'Fail to connect to admin console server.';
var FILEREAD_ERROR = 'Fail to read the file, please check if the application is started legally.';
var RUNDAEMON_INFO = 'Application run in daemon.\nStop the application use the command:pomelo stop.';
var CLOSEAPP_INFO = 'Closing the application......\nPlease wait......';
var ADD_SERVER_WARNING = 'The add action here is' + ' deprecated'.red + ', please use' + ' pomelo-cli'.green +' instead.';

var INIT_PROJ_NOTICE = "The default admin user is: \n"+ "  username".green + ": admin\n  " + "password".green+ ": admin\nYou can configure admin users by editing adminUser.json later.\n ";

var USAGE = '' + '\n' + '  Usage: pomelo [action] [options]\n' + '\n' + '  Options:\n' + '  init  [path]        create new application\n' + '  start [development|production] [--daemon]      start the application\n' + '  list  [-u <username -p <password>] list server information\n' + '  stop  [-u <username> -p <password>] stop the application\n' + '  kill  [-u <username> -p <password>] [--force]     kill the application\n' + '  --version            output framework version\n' + '  --help                output this help information\n';

var COMMAND_ERROR = 'Illegal command format.'.red + USAGE;

var username;
var password;

/**
 * Parse command arguments.
 */
var args = process.argv.slice(2);

(function() {
  var arg = args.shift();
  switch(arg) {
  case '--help':
    legalArgNum(0);
    abort(USAGE);
    break;
  case '--version':
    legalArgNum(0);
    abort(version);
    break;
  case 'list':
    parseUserAndPassword(list);
    break;
  case 'init':
    legalArgNum(1);
    init(args[0]);
    break;
  case 'start':
    start();
    break;
  case 'add':
    add();
    break;
  case 'stop':
    parseUserAndPassword(terminal.bind(null, 'stop'));
    break;
  case 'kill':
    parseUserAndPassword(terminal.bind(null, 'kill'));
    break;
  default:
    abort(COMMAND_ERROR);
    break;
  }
})();

/**
 * Init application at the given directory `path`.
 *
 * @param {String} path
 */
function init(path) {
  console.log(INIT_PROJ_NOTICE);
  confirm('Does your browser support WebSocket? (y/n)', function(isWs) {
    emptyDirectory(path, function(empty) {
      if(empty) {
        process.stdin.destroy();
        createApplicationAt(path, isWs);
      } else {
        confirm('Destination is not empty, continue? (y/n)', function(force) {
          process.stdin.destroy();
          if(force) {
            createApplicationAt(path, isWs);
          } else {
            abort('Fail to init a project'.red);
          }
        });
      };
    });
  });
};

/**
 * Create directory and files at the given directory `path`.
 *
 * @param {String} ph
 */
function createApplicationAt(ph, isWs) {
  var name = path.basename(path.resolve(CUR_DIR, ph));
  copy(path.join(__dirname, '../template/'), ph);
  mkdir(path.join(ph, 'game-server/logs'));
  mkdir(path.join(ph, 'shared'));
  setTimeout(function() {
    if (isWs) {

      // use websocket
      var unlinkFiles = ['game-server/app.js.sio', 
                         'web-server/public/index.html.sio',
                         'web-server/public/js/lib/pomeloclient.js',
                         'web-server/public/js/lib/socket.io.js'];
      for(var i = 0; i < unlinkFiles.length; ++i) {
        fs.unlinkSync(path.resolve(ph, unlinkFiles[i]));
      }
    } else {
      // use socket.io
      fs.unlinkSync(path.resolve(ph, 'game-server/app.js'));
      fs.renameSync(path.resolve(ph, 'game-server/app.js.sio'),
                    path.resolve(ph, 'game-server/app.js'));

      fs.unlinkSync(path.resolve(ph, 'web-server/public/index.html'));
      fs.renameSync(path.resolve(ph, 'web-server/public/index.html.sio'),
                    path.resolve(ph, 'web-server/public/index.html'));

      // rmdir -r
      var rmdir = function(dir) {
        var list = fs.readdirSync(dir);
        for(var i = 0; i < list.length; i++) {
          var filename = path.join(dir, list[i]);
          var stat = fs.statSync(filename);
          if(filename == "." || filename == "..") {
          } else if(stat.isDirectory()) {
            rmdir(filename);
          } else {
            fs.unlinkSync(filename);
          }
        }
        fs.rmdirSync(dir);
      };

      rmdir(path.resolve(ph, 'web-server/public/js/lib/build'));
      rmdir(path.resolve(ph, 'web-server/public/js/lib/local'));
      fs.unlinkSync(path.resolve(ph, 'web-server/public/js/lib/component.json'));
    }
    var repalceFiles = ['game-server/app.js',
                        'game-server/package.json',
                        'web-server/package.json'];
    for(var i = 0; i < repalceFiles.length; i++) {
      var str = fs.readFileSync(path.resolve(ph, repalceFiles[i])).toString();
      fs.writeFileSync(path.resolve(ph, repalceFiles[i]), str.replace('$', name));
    }
    var f = path.resolve(ph, 'game-server/package.json');
    var content = fs.readFileSync(f).toString();
    fs.writeFileSync(f, content.replace('#', version));
  }, TIME_INIT);
}

/**
 * Start application.
 *
 */
function start() {
  var mode = DEV;
  switch(args.length) {
  case 0:
    break;
  case 1:
    if(args[0] == DEV || args[0] == PRD) mode = args[0];
    else if(args[0] == DEM) DAEMON = true;
    else abort(COMMAND_ERROR);
    break;
  case 2:
    if(args[0] == DEV || args[0] == PRD) {
      mode = args[0];
      if(args[1] == DEM) DAEMON = true;
      else abort(COMMAND_ERROR);
    } else abort(COMMAND_ERROR);
    break;
  default:
    abort(COMMAND_ERROR);
    break;
  };
  if(IF_HOME) {
    var ls;
    if(!DAEMON) {
      ls = spawn(process.execPath, [path.resolve(HOME, 'app.js'), 'env=' + mode]);
      ls.stdout.on('data', function(data) {
        console.log(data.toString());
      });
      ls.stderr.on('data', function(data) {
        console.log(data.toString());
      });
    } else {
        var cmd = 'forever start app.js env=' + mode;
        ls = exec(cmd, function(err, stdout, stderr) {
          if(!!err) {
            abort(INSTALLFOREVER_ERROR);
          }
          else {
            console.info(RUNDAEMON_INFO);
          }
        });
    }
    fs.writeFile(TMP_FILE, mode + ':' + DAEMON);
  } else abort(NOWORKSPACE_ERROR);
};

/**
 * List pomelo processes.
 *
 */
function list() {
  legalArgNum(0);
  if(IF_WORKSPACE) {
    fs.readFile(TMP_FILE, function(err, data) {
      if(err) abort(FILEREAD_ERROR);
      var u = username || 'admin';
      var p = password || 'admin';
      var client = new adminClient({username: u, password: p, md5: true});
      MASTER_JSON = require(MASTER_CONFIG);
      var config = MASTER_JSON[data.toString().split(':')[0]];
      var id = 'pomelo_list_' + Date.now();
      client.connect(id, config.host, config.port, function(err) {
        if(err) abort(CONNECT_ERROR + err.red);
        else {
          client.request(co.moduleId, {
            signal: 'list'
          }, function(err, data) {
            if(err) console.error(err);            
            var msg = data.msg;
            var rows = [];
            rows.push(['serverId', 'serverType', 'pid', 'heapUsed(M)', 'uptime(m)']);
            for(var key in msg) {
              var server = msg[key];
              rows.push([server['serverId'], server['serverType'], server['pid'], server['heapUsed'], server['uptime']]);
            }
            console.log(cliff.stringifyRows(rows, ['red', 'blue', 'green', 'white', 'yellow']));
            process.exit(0);
          });
        }
      });
    });
  } else abort(NOWORKSPACE_ERROR);
};

/**
 * Add server to application.
 * @deprecated use pomelo-cli instead
 */
function add() {
  console.log(ADD_SERVER_WARNING); 
};

/**
 * Terminal application.
 *
 * @param {String} signal stop/kill
 *
 */
function terminal(signal) {
  if(IF_WORKSPACE) {
    console.info(CLOSEAPP_INFO);
    if(args[0] === '--force') {
      os.platform() === 'win32' ? exec(KILL_CMD_WIN):exec(KILL_CMD_LUX);
      process.exit(1);
    }
    fs.readFile(TMP_FILE, function(err, data) {
      if(err) abort(FILEREAD_ERROR);
      var u = username || 'admin';
      var p = password || 'admin';
      var client = new adminClient({username: u, password: p, md5: true});
      MASTER_JSON = require(MASTER_CONFIG);
      var config = MASTER_JSON[data.toString().split(':')[0]];
      var id = 'pomelo_terminal_' + Date.now();
      if(data.toString().split(':')[1] === 'true' && args.length === 0) {
        setTimeout(function() {
          if(IF_HOME) exec('forever stop app.js');
          else exec('cd game-server && forever stop app.js');
          process.exit(0);
        }, TIME_KILL_WAIT);
      }
      client.connect(id, config.host, config.port, function(err) {
        if(err) abort(CONNECT_ERROR + err.red);
        client.request(co.moduleId, {
          signal: signal, ids: args
        }, function(err, msg) {
          if(err) console.error(err);
          setTimeout(function() {
            if(msg && msg.status === 'all') fs.unlinkSync(TMP_FILE);
            process.exit(0);
          }, TIME_KILL_WAIT);
        });
      });
    });
  } else abort(NOWORKSPACE_ERROR);
};

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files) {
    if(err && 'ENOENT' != err.code) abort(FILEREAD_ERROR);
    fn(!files || !files.length);
  });
};

/**
 * Prompt confirmation with the given `msg`.
 *
 * @param {String} msg
 * @param {Function} fn
 */
function confirm(msg, fn) {
  prompt(msg, function(val) {
    fn(/^ *y(es)?/i.test(val));
  });
};

/**
 * Prompt input with the given `msg` and callback `fn`.
 *
 * @param {String} msg
 * @param {Function} fn
 */
function prompt(msg, fn) {
  if(' ' == msg[msg.length - 1]) process.stdout.write(msg);
  else console.log(msg);
  process.stdin.setEncoding('ascii');
  process.stdin.once('data', function(data) {
    fn(data);
  }).resume();
};

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
  console.error(str);
  process.exit(1);
};

/**
 * Check whether the number of arguments is legal.
 *
 * @param {Number} argNum
 */
function legalArgNum(argNum) {
  if(args.length != argNum) abort(COMMAND_ERROR);
};

/**
 * Copy template files to project.
 *
 * @param {String} origin
 * @param {String} target
 */
function copy(origin, target) {
  if(!fs.existsSync(origin)) abort(origin + 'is not exist.');
  if(!fs.existsSync(target)) {
    mkdir(target);
    console.log('   \x1b[36mcreate\x1b[0m : ' + target);
  }
  fs.readdir(origin, function(err, datalist) {
    if(err) abort(FILEREAD_ERROR);
    for(var i = 0; i < datalist.length; i++) {
      var oCurrent = path.resolve(origin, datalist[i]);
      var tCurrent = path.resolve(target, datalist[i]);
      if(fs.statSync(oCurrent).isFile()) {
        fs.writeFileSync(tCurrent, fs.readFileSync(oCurrent, ''), '');
        console.log('   \x1b[36mcreate\x1b[0m : ' + tCurrent);
      } else if(fs.statSync(oCurrent).isDirectory()) copy(oCurrent, tCurrent);
    }
  });
};

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */
function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 * Parse args to get username and password for command list, stop, kill 
 *
 * @param {Function} cb 
 */
function parseUserAndPassword(cb) {
  var res = [];
  for (var i = 0; i < args.length; ++i) {
    switch (args[i]) {
      case '-u' :
        if (i < args.length - 1) {
          username = args[++i];
        } else {
          abort(COMMAND_ERROR);
        }
        break;
      case '-p' :
        if (i < args.length -1 ) {
          password = args[++i];
        } else {
          abort(COMMAND_ERROR);
        }
        break;
      default:
        res.push(args[i]);
    }
  }
  args = res;
  cb.apply(null);
}


